From 553b805626054f7f45a80d6dfe74eff7ba2f33bd Mon Sep 17 00:00:00 2001
From: Christopher Kohlhoff <chris@kohlhoff.com>
Date: Mon, 2 Nov 2020 12:25:11 +1100
Subject: [PATCH] Fix any_executor support for BOOST_ASIO_NO_TYPEID (i.e. no
 RTTI).

---
 libs/asio/include/boost/asio/execution/any_executor.hpp | 24 +++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/libs/asio/include/boost/asio/execution/any_executor.hpp b/libs/asio/include/boost/asio/execution/any_executor.hpp
index 9c7018c88..e677bf06f 100644
--- a/libs/asio/include/boost/asio/execution/any_executor.hpp
+++ b/libs/asio/include/boost/asio/execution/any_executor.hpp
@@ -620,7 +620,11 @@ class any_executor_base
     return static_cast<Executor*>(target_);
   }
 
+#if !defined(BOOST_ASIO_NO_TYPEID)
   const std::type_info& target_type() const
+#else // !defined(BOOST_ASIO_NO_TYPEID)
+  const void* target_type() const
+#endif // !defined(BOOST_ASIO_NO_TYPEID)
   {
     return target_fns_->target_type();
   }
@@ -800,16 +804,27 @@ class any_executor_base
 
   struct target_fns
   {
+#if !defined(BOOST_ASIO_NO_TYPEID)
     const std::type_info& (*target_type)();
+#else // !defined(BOOST_ASIO_NO_TYPEID)
+    const void* (*target_type)();
+#endif // !defined(BOOST_ASIO_NO_TYPEID)
     bool (*equal)(const any_executor_base&, const any_executor_base&);
     void (*execute)(const any_executor_base&, BOOST_ASIO_MOVE_ARG(function));
     void (*blocking_execute)(const any_executor_base&, function_view);
   };
 
+#if !defined(BOOST_ASIO_NO_TYPEID)
   static const std::type_info& target_type_void()
   {
     return typeid(void);
   }
+#else // !defined(BOOST_ASIO_NO_TYPEID)
+  static const void* target_type_void()
+  {
+    return 0;
+  }
+#endif // !defined(BOOST_ASIO_NO_TYPEID)
 
   static bool equal_void(const any_executor_base&, const any_executor_base&)
   {
@@ -845,11 +860,20 @@ class any_executor_base
     return &fns;
   }
 
+#if !defined(BOOST_ASIO_NO_TYPEID)
   template <typename Ex>
   static const std::type_info& target_type_ex()
   {
     return typeid(Ex);
   }
+#else // !defined(BOOST_ASIO_NO_TYPEID)
+  template <typename Ex>
+  static const void* target_type_ex()
+  {
+    static int unique_id;
+    return &unique_id;
+  }
+#endif // !defined(BOOST_ASIO_NO_TYPEID)
 
   template <typename Ex>
   static bool equal_ex(const any_executor_base& ex1,
